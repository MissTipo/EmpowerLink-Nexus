type InclusivityMetric {
    id: Int!
    category: String!
    value: Float!
    timestamp: String!
    regionId: Int!
}

type TaskHandle {
  taskId: String!
  status: String!
}

type InclusivityIndex {
    value: Float
    status: String!
    error: String
}

type Query {
    getMetrics(regionId: Int!): [InclusivityMetric!]!
    computeInclusivityIndex(regionId: Int!): TaskHandle!
    getTaskStatus(taskId: String!): InclusivityIndex!
    getInclusivityTrend(regionId: Int!): [InclusivityMetric!]!
}

