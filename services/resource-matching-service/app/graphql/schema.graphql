scalar JSON

enum ServiceType {
  HEALTH
  LEGAL
  SOCIAL
}

# Input type used for user location in queries
input GeoPointInput {
  latitude: Float!
  longitude: Float!
}

# Output type used in responses
type GeoPoint {
  latitude: Float!
  longitude: Float!
}

# 1. Single resource
type Resource {
  resource_id: ID!
  service_type: ServiceType!
  latitude: Float!
  longitude: Float!
  cost_level: Int!
  languages_supported: [String!]!
  capacity: Int!
  tags: JSON!
}

# 2. Resource match
type ResourceMatch {
  resource: Resource!
  score: Float!
}

# 3. Resources per Capita
 type ResourcesPerCapita {
   regionId: Int!
   regionName: String!
   category: String!
   resourcesCount: Int!
   populationInNeed: Int!
   perThousandNeeded: Float!
 }

# 4. Resource‑Need Gap
 type ResourceNeedGap {
   regionId: Int!
   regionName: String!
   category: String!
   demandCount: Int!
   supplyCount: Int!
   gap: Int!          # supplyCount - demandCount
 }

# 5. Match‑Success Rate Over Time
 type MatchSuccessRatePoint {
   month: String!
   successRate: Float!
 }

type Query {
  getMatchingResources(
    userId: ID!
    serviceType: ServiceType!
    location: GeoPointInput!
    age: Int
    gender: String
    languages: [String!]
    costLevel: Int
    maxDistanceKm: Float
    limit: Int = 5
  ): [ResourceMatch!]!

  # 2. list all (or filtered) resources
  getAvailableResources(
    serviceType: ServiceType
    limit: Int = 50
  ): [Resource!]!

  # 3. alias for triggering a match request  
  requestResourceMatching(
    userId: ID!
    serviceType: ServiceType!
    location: GeoPointInput!
    age: Int
    gender: String
    languages: [String!]
    costLevel: Int
    maxDistanceKm: Float
    limit: Int = 5
  ): [ResourceMatch!]!
  # 4. get resources per capita
  resourcesPerCapita: [ResourcesPerCapita!]!
  resourceNeedGap: [ResourceNeedGap!]!
  matchSuccessRate(regionId: Int!): [MatchSuccessRatePoint!]!
}

input ResourceInput {
  latitude: Float!
  longitude: Float!
  cost_level: Int!
  languages_supported: [String!]!
  capacity: Int!
  tags: JSON!
}

type Mutation {
  createResource(organizationId: ID!, input: ResourceInput!): Resource!
}

