name: Resource Matching CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "services/resource-matching-service/**"
  pull_request:
    branches: [ main ]
    paths:
      - "services/resource-matching-service/**"

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/resource-matching-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/resource-matching-service/requirements.txt') }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          python3 -m pytest

  train_and_package:
    name: üèãÔ∏è Train Model & Package Artifact
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: services/resource-matching-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/resource-matching-service/requirements.txt') }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train Scikit-learn Model
        run: |
          python -m ai.build_model --seed
          mkdir -p ai/artifacts
          cp ai/knn_model.pkl ai/artifacts/model.pkl

      - name: Cache trained model artifact
        uses: actions/cache@v3
        with:
          path: services/resource-matching-service/ai/artifacts
          key: ${{ runner.os }}-model-${{ github.sha }}

      - name: List AI directory contents
        run: |
          ls -lh ai/
          ls -lh ai/artifacts/

      - name: Ensure model exists
        run: |
          test -f ai/artifacts/model.pkl


      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: rm-model
          path: services/resource-matching-service/ai/knn_model.pkl

  build_and_deploy:
    name: üö¢ Build, Push & Deploy
    runs-on: ubuntu-latest
    needs: train_and_package
    defaults:
      run:
        working-directory: services/docker
    steps:
      - uses: actions/checkout@v3

      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: rm-model
          path: services/resource-matching-service/ai

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & push resource-matching image
        run: |
          docker compose build resource-matching-service
          docker compose push resource-matching-service

      - name: Install Kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.24.0/kompose-linux-amd64 \
            -o kompose && chmod +x kompose && sudo mv kompose /usr/local/bin

      - name: Generate K8s Manifests
        run: |
          mkdir -p k8s
          kompose convert -f docker-compose.yml -o ../k8s/

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set Kubernetes Context
        run: doctl kubernetes cluster kubeconfig save k8s-empowerlink-nexus


      - name: Use DO cluster context
        run: kubectl config use-context do-tor1-k8s-empowerlink-nexus

      # - name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: '${{ secrets.GCP_SA_KEY }}'
      #
      # - name: Setup gcloud SDK
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     project_id: empowerlink-nexus
      #
      # - name: Debug gcloud Auth
      #   run: gcloud auth list
      #
      # - name: Set active account from JSON key
      #   run: |
      #     ACCOUNT=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
      #     gcloud config set account $ACCOUNT
      #
      # - name: Get GKE credentials
      #   run: |
      #     gcloud container clusters get-credentials empowerlink-cluster \
      #       --zone us-central1-a --project empowerlink-nexus
      #
      # - name: Configure Kubeconfig
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #   run: |
      #     mkdir -p $HOME/.kube
      #     cat $HOME/.kube/config
      #
      # - name: Install gke-gcloud-auth-plugin
      #   run: |
      #     gcloud components install gke-gcloud-auth-plugin -q


      - name: Clean up old deployments
        run: |
          kubectl delete deployment resource-matching-service \
            --ignore-not-found --grace-period=0 --force
          kubectl delete service resource-matching-service \
            --ignore-not-found

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ../k8s/resource-matching-service-deployment.yaml
          kubectl apply -f ../k8s/resource-matching-service-service.yaml

