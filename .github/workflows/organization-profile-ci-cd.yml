name: Organization Profile CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "services/organization-profile-service/**"
  pull_request:
    branches: [ main ]
    paths:
      - "services/organization-profile-service/**"

jobs:
  test:
    name: Run Organization Profile Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/organization-profile-service
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Start PostgreSQL with Docker Compose
        run: |
          docker compose -f ../../docker-compose.db.yml up -d
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec $(docker ps -qf "name=postgres") pg_isready -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python3 -m pytest

  build_and_deploy:
    name: Build, Push, and Deploy User Profile
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: services/docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      - name: Build and Push Organization Profile Image with Docker Compose
        run: |
          docker compose build organization-profile
          docker compose push organization-profile

      - name: Install Kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.24.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv kompose /usr/local/bin

      - name: Generate Kubernetes Manifests
        run: |
          mkdir -p k8s
          # Generate manifests from docker-compose.yml located in the services folder root.
          kompose convert -f docker-compose.yml -o ../k8s/

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: empowerlink-nexus

      - name: Debug gcloud Auth
        run: gcloud auth list

      - name: Set active account from JSON key
        run: |
          ACCOUNT=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
          gcloud config set account $ACCOUNT



      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials empowerlink-cluster --zone us-central1-a --project empowerlink-nexus

      - name: Configure Kubeconfig
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          mkdir -p $HOME/.kube
          cat $HOME/.kube/config

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q

      - name: Ensure full cleanup of organization-profile
        run: |
          kubectl delete deployment organization-profile --ignore-not-found=true --grace-period=0 --force
          kubectl delete rs -l app=organization-profile --ignore-not-found=true
          kubectl delete pods -l app=organization-profile --ignore-not-found=true
          kubectl delete service organization-profile --ignore-not-found=true
          kubectl delete service organization-profile-service --ignore-not-found=true

          # Verify it's gone
          echo "Remaining resources (if any):"
          kubectl get all -l app=organization-profile || true

      - name: List k8s files for debugging
        run: |
          echo "Listing k8s files..."
          ls -l ../k8s/

      - name: Deploy to Kubernetes
        run: |
          kubectl create -f ../k8s/organization-profile-deployment.yaml
          kubectl create -f ../k8s/organization-profile-service.yaml

